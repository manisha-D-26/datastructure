#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
    int data;
    struct Node* left;
    struct Node* right;
} Node;

Node* createNode(int data) {
    Node* newNode = (Node*) malloc(sizeof(Node));
    if (!newNode) {
        printf("Memory error\n");
        return NULL;
    }
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}
int height(Node* node) {
    if (node == NULL) {
        return 0;
    }
    return 1 + ((height(node->left) > height(node->right)) ? height(node->left) : height(node->right));
}
int max(int a, int b) {
    return (a > b) ? a : b;
}
int diameter(Node* root) {
    if (root == NULL) {
        return 0;
    }
    int lheight = height(root->left);
    int rheight = height(root->right);
    int ldiameter = diameter(root->left);
    int rdiameter = diameter(root->right);
    return max(lheight + rheight + 1, max(ldiameter, rdiameter));
}

int main() {
    Node* root = createNode(1);
    if (root) {
        root->left = createNode(2);
        root->right = createNode(3);
        root->left->left = createNode(4);
        root->left->right = createNode(5);

        int treeDiameter = diameter(root);
        printf("Diameter of the binary tree: %d\n", treeDiameter);
    } else {
        printf("Memory error\n");
    }
    return 0;
}
